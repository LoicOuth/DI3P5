// ------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime : 16.0.0.0
//  
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace USite_Templating.Services.T4
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class PipelineYml : PipelineYmlBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("  \r\ntrigger: none\r\nvariables:\r\n  currentEnvironment: ");
            
            #line 7 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IsDev ? "dev" : "prod"));
            
            #line default
            #line hidden
            this.Write(@"

stages:
  - stage: build_project
    pool:
      vmImage: ubuntu-latest
    jobs:
      - job: build
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: 14.x
            displayName: Install Node.js
          - script: |
              npm init -y
              npm install tailwindcss
              npx tailwindcss init
            displayName: Initialize npm and Tailwind CSS
          - script: |
              sed -i ""s|  content: \\[],|  content: [ \""*.html\"" ],|g"" tailwind.config.js
            displayName: Update tailwind.config.js
          - script: |
              echo ""@import 'tailwindcss/base';"" > styles.css
              echo ""@import 'tailwindcss/components';"" >> styles.css
              echo ""@import 'tailwindcss/utilities';"" >> styles.css
            displayName: Create styles.css
          - script: |
              npx tailwindcss build -i styles.css -o ");
            
            #line 34 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SiteName));
            
            #line default
            #line hidden
            this.Write("/style.min.css --minify\r\n            displayName: Build and minify CSS\r\n         " +
                    " - script: |\r\n              mv *.html ");
            
            #line 37 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SiteName));
            
            #line default
            #line hidden
            this.Write("/\r\n            displayName: Move HTML files to ");
            
            #line 38 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SiteName));
            
            #line default
            #line hidden
            this.Write("/\r\n          - task: PublishPipelineArtifact@1\r\n            inputs:\r\n            " +
                    "  targetPath: $(System.DefaultWorkingDirectory)/");
            
            #line 41 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SiteName));
            
            #line default
            #line hidden
            this.Write("\r\n              artifact: ");
            
            #line 42 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SiteName));
            
            #line default
            #line hidden
            this.Write("\r\n              publishLocation: pipeline\r\n            displayName: Publish artif" +
                    "act\r\n\r\n  - stage: deploy_project\r\n");
            
            #line 47 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
 if(!IsDev) { 
            
            #line default
            #line hidden
            this.Write("    pool:\r\n      vmImage: ubuntu-latest\r\n");
            
            #line 50 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("    pool: diiage-hosted\r\n");
            
            #line 52 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    jobs:\r\n      - job: deploy\r\n        steps:\r\n");
            
            #line 56 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
 if(!IsDev) { 
            
            #line default
            #line hidden
            this.Write(@"        - task: CmdLine@2
          displayName: Install dos2unix
          inputs:
            script: 'sudo apt install dos2unix'
        - task: KubectlInstaller@0
          displayName: Install kubectl latest
        - task: DownloadSecureFile@1
          inputs:
            secureFile: 'config_prod.conf'
        - task: CopyFiles@2
          displayName: 'Import kubeconfig'
          inputs:
           SourceFolder: '$(Agent.TempDirectory)'
           Contents: config_prod.conf
           TargetFolder: .
");
            
            #line 72 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        - task: DownloadPipelineArtifact@2\r\n          inputs:\r\n            artifa" +
                    "ct: ");
            
            #line 75 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SiteName));
            
            #line default
            #line hidden
            this.Write("\r\n            path: $(System.DefaultWorkingDirectory)/");
            
            #line 76 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SiteName));
            
            #line default
            #line hidden
            this.Write("\r\n        - task: CmdLine@2\r\n          displayName: Changing  the configuration f" +
                    "ile\'s encoding\r\n          inputs:\r\n            script: |\r\n              dos2unix" +
                    " $(System.DefaultWorkingDirectory)/");
            
            #line 81 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SiteName));
            
            #line default
            #line hidden
            this.Write(".conf\r\n        - task: CmdLine@2\r\n          displayName: Sending the website file" +
                    "s and nginx conf to the remote PVCs\r\n          inputs:\r\n            script: |\r\n " +
                    "             for pod in `kubectl");
            
            #line 86 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IsDev ? " " : " --kubeconfig=./config_prod.conf "));
            
            #line default
            #line hidden
            this.Write("get pods -n usite-$(currentEnvironment) -o=name | grep \'usite-websites\' | sed \"s/" +
                    "^.\\{4\\}//\"`\r\n              do\r\n                kubectl");
            
            #line 88 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IsDev ? " " : " --kubeconfig=./config_prod.conf "));
            
            #line default
            #line hidden
            this.Write("cp $(System.DefaultWorkingDirectory)/");
            
            #line 88 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SiteName));
            
            #line default
            #line hidden
            this.Write("/ usite-$(currentEnvironment)/$pod:/var/www/clients/\r\n                dos2unix $(" +
                    "System.DefaultWorkingDirectory)/");
            
            #line 89 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SiteName));
            
            #line default
            #line hidden
            this.Write(".conf && kubectl");
            
            #line 89 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IsDev ? " " : " --kubeconfig=./config_prod.conf "));
            
            #line default
            #line hidden
            this.Write("cp $(System.DefaultWorkingDirectory)/");
            
            #line 89 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SiteName));
            
            #line default
            #line hidden
            this.Write(".conf usite-$(currentEnvironment)/$pod:/etc/nginx/conf.d/clients/\r\n              " +
                    "  break\r\n              done\r\n        - task: CmdLine@2\r\n          displayName: A" +
                    "pplying the client ingress\r\n          inputs:\r\n            script: |\r\n          " +
                    "    kubectl");
            
            #line 96 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IsDev ? " " : " --kubeconfig=./config_prod.conf "));
            
            #line default
            #line hidden
            this.Write(@"apply -f $(System.DefaultWorkingDirectory)/ingress.yaml -n usite-$(currentEnvironment)
        - task: CmdLine@2
          displayName: Restarting the nginx pods through a deployment rollout
          inputs:
            script: |
                kubectl");
            
            #line 101 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IsDev ? " " : " --kubeconfig=./config_prod.conf "));
            
            #line default
            #line hidden
            this.Write("-n usite-$(currentEnvironment) rollout restart deployment usite-websites-$(curren" +
                    "tEnvironment)-usite-websites-service");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\Admin\workspace\USite-Templating\USite-Templating.Services\T4\PipelineYml.tt"

private string _SiteNameField;

/// <summary>
/// Access the SiteName parameter of the template.
/// </summary>
private string SiteName
{
    get
    {
        return this._SiteNameField;
    }
}

private bool _IsDevField;

/// <summary>
/// Access the IsDev parameter of the template.
/// </summary>
private bool IsDev
{
    get
    {
        return this._IsDevField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool SiteNameValueAcquired = false;
if (this.Session.ContainsKey("SiteName"))
{
    this._SiteNameField = ((string)(this.Session["SiteName"]));
    SiteNameValueAcquired = true;
}
if ((SiteNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("SiteName");
    if ((data != null))
    {
        this._SiteNameField = ((string)(data));
    }
}
bool IsDevValueAcquired = false;
if (this.Session.ContainsKey("IsDev"))
{
    this._IsDevField = ((bool)(this.Session["IsDev"]));
    IsDevValueAcquired = true;
}
if ((IsDevValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("IsDev");
    if ((data != null))
    {
        this._IsDevField = ((bool)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class PipelineYmlBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
